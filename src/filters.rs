use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum TopicFilter {
    History,
    Science,
    Technology,
    Mathematics,
}

impl TopicFilter {
    pub fn keywords(&self) -> &'static [&'static str] {
        match self {
            Self::History => &[
                "war",
                "battle",
                "empire",
                "kingdom",
                "revolution",
                "century",
                "ancient",
                "medieval",
                "renaissance",
                "king",
                "queen",
                "emperor",
                "president",
                "treaty",
                "civilization",
                "dynasty",
                "colonial",
                "independence",
                "democracy",
                "republic",
                "historical",
                "historian",
                "timeline",
                "conquest",
                "invasion",
                "rebellion",
                "monarchy",
                "feudal",
                "crusade",
                "expedition",
                "exploration",
                "discovery",
                "archaeological",
                "artifact",
                "monument",
                "heritage",
                "culture",
                "tradition",
            ],
            Self::Science => &[
                "physics",
                "chemistry",
                "biology",
                "quantum",
                "molecule",
                "atom",
                "cell",
                "dna",
                "protein",
                "evolution",
                "ecosystem",
                "species",
                "reaction",
                "element",
                "compound",
                "energy",
                "force",
                "gravity",
                "electromagnetic",
                "thermodynamics",
                "genetics",
                "neuroscience",
                "astronomy",
                "planet",
                "star",
                "galaxy",
                "universe",
                "theory",
                "experiment",
                "research",
                "scientist",
                "discovery",
                "medical",
                "disease",
                "virus",
                "bacteria",
                "vaccine",
                "drug",
                "climate",
                "environment",
            ],
            Self::Technology => &[
                "computer",
                "software",
                "programming",
                "algorithm",
                "artificial intelligence",
                "machine learning",
                "database",
                "network",
                "internet",
                "web",
                "mobile",
                "technology",
                "digital",
                "cryptocurrency",
                "blockchain",
                "cybersecurity",
                "operating system",
                "framework",
                "api",
                "protocol",
                "javascript",
                "python",
                "rust",
                "java",
                "linux",
                "windows",
                "android",
                "ios",
                "github",
                "google",
                "microsoft",
                "apple",
                "startup",
                "silicon valley",
                "open source",
            ],
            Self::Mathematics => &[
                "theorem",
                "equation",
                "function",
                "algebra",
                "calculus",
                "geometry",
                "topology",
                "statistics",
                "probability",
                "number theory",
                "logic",
                "mathematical",
                "mathematician",
                "proof",
                "formula",
                "matrix",
                "vector",
                "derivative",
                "integral",
                "limit",
                "infinity",
                "prime",
                "polynomial",
                "graph theory",
                "combinatorics",
                "analysis",
                "differential equation",
            ],
        }
    }

    pub fn is_relevant(&self, title: &str, content: &str) -> bool {
        let title_lower = title.to_lowercase();
        let content_lower = content.to_lowercase();

        self.keywords()
            .iter()
            .any(|&keyword| title_lower.contains(keyword) || content_lower.contains(keyword))
    }

    pub fn description(&self) -> &'static str {
        match self {
            Self::History => "Historical Events, Figures, and Civilizations",
            Self::Science => "Natural Sciences, Physics, Chemistry, and Biology",
            Self::Technology => "Technology, Computer Science, and Software Development",
            Self::Mathematics => "Mathematics, Statistics, and Mathematical Concepts",
        }
    }

    pub fn server_name(&self, language: &str) -> String {
        let topic = match self {
            Self::History => "History",
            Self::Science => "Science",
            Self::Technology => "Technology",
            Self::Mathematics => "Mathematics",
        };
        format!("Wikipedia {} {} StaticMCP", language.to_uppercase(), topic)
    }
}
